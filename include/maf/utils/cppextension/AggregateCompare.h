#pragma once
#include "Aggregate.h"

namespace maf {
namespace nstl {

template <class T>
decltype(auto) flaten(T&& v);

template <class T, typename = int>
struct __Flattener {
  static decltype(auto) _flaten(T&& v) { return std::tie(std::forward<T>(v)); }
};

template <class Struct>
struct __Flattener<
    Struct, std::enable_if_t<std::is_aggregate_v<std::decay_t<Struct>>, int>> {
  static decltype(auto) _flaten(Struct&& value) {
    using namespace maf::nstl;
    using T = std::decay_t<Struct>;
    // clang-format off

  if constexpr (is_n_args_braces_constructible<T,100>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99,a100] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95),flaten(a96),flaten(a97),flaten(a98),flaten(a99),flaten(a100)); }
  else if constexpr (is_n_args_braces_constructible<T,99>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98,a99] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95),flaten(a96),flaten(a97),flaten(a98),flaten(a99)); }
  else if constexpr (is_n_args_braces_constructible<T,98>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97,a98] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95),flaten(a96),flaten(a97),flaten(a98)); }
  else if constexpr (is_n_args_braces_constructible<T,97>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96,a97] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95),flaten(a96),flaten(a97)); }
  else if constexpr (is_n_args_braces_constructible<T,96>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95,a96] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95),flaten(a96)); }
  else if constexpr (is_n_args_braces_constructible<T,95>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94,a95] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94),flaten(a95)); }
  else if constexpr (is_n_args_braces_constructible<T,94>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93,a94] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93),flaten(a94)); }
  else if constexpr (is_n_args_braces_constructible<T,93>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92,a93] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92),flaten(a93)); }
  else if constexpr (is_n_args_braces_constructible<T,92>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91,a92] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91),flaten(a92)); }
  else if constexpr (is_n_args_braces_constructible<T,91>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90,a91] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90),flaten(a91)); }
  else if constexpr (is_n_args_braces_constructible<T,90>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89,a90] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89),flaten(a90)); }
  else if constexpr (is_n_args_braces_constructible<T,89>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88,a89] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88),flaten(a89)); }
  else if constexpr (is_n_args_braces_constructible<T,88>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87,a88] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87),flaten(a88)); }
  else if constexpr (is_n_args_braces_constructible<T,87>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86,a87] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86),flaten(a87)); }
  else if constexpr (is_n_args_braces_constructible<T,86>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85,a86] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85),flaten(a86)); }
  else if constexpr (is_n_args_braces_constructible<T,85>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84,a85] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84),flaten(a85)); }
  else if constexpr (is_n_args_braces_constructible<T,84>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83,a84] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83),flaten(a84)); }
  else if constexpr (is_n_args_braces_constructible<T,83>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82,a83] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82),flaten(a83)); }
  else if constexpr (is_n_args_braces_constructible<T,82>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81,a82] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81),flaten(a82)); }
  else if constexpr (is_n_args_braces_constructible<T,81>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80,a81] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80),flaten(a81)); }
  else if constexpr (is_n_args_braces_constructible<T,80>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79,a80] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79),flaten(a80)); }
  else if constexpr (is_n_args_braces_constructible<T,79>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78,a79] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78),flaten(a79)); }
  else if constexpr (is_n_args_braces_constructible<T,78>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77,a78] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77),flaten(a78)); }
  else if constexpr (is_n_args_braces_constructible<T,77>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76,a77] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76),flaten(a77)); }
  else if constexpr (is_n_args_braces_constructible<T,76>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75,a76] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75),flaten(a76)); }
  else if constexpr (is_n_args_braces_constructible<T,75>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74,a75] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74),flaten(a75)); }
  else if constexpr (is_n_args_braces_constructible<T,74>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73,a74] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73),flaten(a74)); }
  else if constexpr (is_n_args_braces_constructible<T,73>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72,a73] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72),flaten(a73)); }
  else if constexpr (is_n_args_braces_constructible<T,72>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71,a72] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71),flaten(a72)); }
  else if constexpr (is_n_args_braces_constructible<T,71>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70,a71] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70),flaten(a71)); }
  else if constexpr (is_n_args_braces_constructible<T,70>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69,a70] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69),flaten(a70)); }
  else if constexpr (is_n_args_braces_constructible<T,69>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68,a69] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68),flaten(a69)); }
  else if constexpr (is_n_args_braces_constructible<T,68>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67,a68] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67),flaten(a68)); }
  else if constexpr (is_n_args_braces_constructible<T,67>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66,a67] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66),flaten(a67)); }
  else if constexpr (is_n_args_braces_constructible<T,66>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65,a66] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65),flaten(a66)); }
  else if constexpr (is_n_args_braces_constructible<T,65>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64,a65] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64),flaten(a65)); }
  else if constexpr (is_n_args_braces_constructible<T,64>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63,a64] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63),flaten(a64)); }
  else if constexpr (is_n_args_braces_constructible<T,63>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62,a63] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62),flaten(a63)); }
  else if constexpr (is_n_args_braces_constructible<T,62>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61,a62] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61),flaten(a62)); }
  else if constexpr (is_n_args_braces_constructible<T,61>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60,a61] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60),flaten(a61)); }
  else if constexpr (is_n_args_braces_constructible<T,60>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59,a60] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59),flaten(a60)); }
  else if constexpr (is_n_args_braces_constructible<T,59>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58,a59] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58),flaten(a59)); }
  else if constexpr (is_n_args_braces_constructible<T,58>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57,a58] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57),flaten(a58)); }
  else if constexpr (is_n_args_braces_constructible<T,57>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56,a57] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56),flaten(a57)); }
  else if constexpr (is_n_args_braces_constructible<T,56>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55,a56] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55),flaten(a56)); }
  else if constexpr (is_n_args_braces_constructible<T,55>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54,a55] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54),flaten(a55)); }
  else if constexpr (is_n_args_braces_constructible<T,54>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53,a54] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53),flaten(a54)); }
  else if constexpr (is_n_args_braces_constructible<T,53>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,a53] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52),flaten(a53)); }
  else if constexpr (is_n_args_braces_constructible<T,52>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51),flaten(a52)); }
  else if constexpr (is_n_args_braces_constructible<T,51>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50),flaten(a51)); }
  else if constexpr (is_n_args_braces_constructible<T,50>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49),flaten(a50)); }
  else if constexpr (is_n_args_braces_constructible<T,49>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48),flaten(a49)); }
  else if constexpr (is_n_args_braces_constructible<T,48>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47),flaten(a48)); }
  else if constexpr (is_n_args_braces_constructible<T,47>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46),flaten(a47)); }
  else if constexpr (is_n_args_braces_constructible<T,46>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45),flaten(a46)); }
  else if constexpr (is_n_args_braces_constructible<T,45>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44),flaten(a45)); }
  else if constexpr (is_n_args_braces_constructible<T,44>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43),flaten(a44)); }
  else if constexpr (is_n_args_braces_constructible<T,43>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42),flaten(a43)); }
  else if constexpr (is_n_args_braces_constructible<T,42>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41),flaten(a42)); }
  else if constexpr (is_n_args_braces_constructible<T,41>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40),flaten(a41)); }
  else if constexpr (is_n_args_braces_constructible<T,40>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39),flaten(a40)); }
  else if constexpr (is_n_args_braces_constructible<T,39>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38),flaten(a39)); }
  else if constexpr (is_n_args_braces_constructible<T,38>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37),flaten(a38)); }
  else if constexpr (is_n_args_braces_constructible<T,37>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36),flaten(a37)); }
  else if constexpr (is_n_args_braces_constructible<T,36>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35),flaten(a36)); }
  else if constexpr (is_n_args_braces_constructible<T,35>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34),flaten(a35)); }
  else if constexpr (is_n_args_braces_constructible<T,34>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33),flaten(a34)); }
  else if constexpr (is_n_args_braces_constructible<T,33>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32),flaten(a33)); }
  else if constexpr (is_n_args_braces_constructible<T,32>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31),flaten(a32)); }
  else if constexpr (is_n_args_braces_constructible<T,31>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30),flaten(a31)); }
  else if constexpr (is_n_args_braces_constructible<T,30>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29),flaten(a30)); }
  else if constexpr (is_n_args_braces_constructible<T,29>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28),flaten(a29)); }
  else if constexpr (is_n_args_braces_constructible<T,28>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27),flaten(a28)); }
  else if constexpr (is_n_args_braces_constructible<T,27>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26),flaten(a27)); }
  else if constexpr (is_n_args_braces_constructible<T,26>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25),flaten(a26)); }
  else if constexpr (is_n_args_braces_constructible<T,25>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24),flaten(a25)); }
  else if constexpr (is_n_args_braces_constructible<T,24>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23),flaten(a24)); }
  else if constexpr (is_n_args_braces_constructible<T,23>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22),flaten(a23)); }
  else if constexpr (is_n_args_braces_constructible<T,22>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21),flaten(a22)); }
  else if constexpr (is_n_args_braces_constructible<T,21>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20),flaten(a21)); }
  else if constexpr (is_n_args_braces_constructible<T,20>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19),flaten(a20)); }
  else if constexpr (is_n_args_braces_constructible<T,19>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18),flaten(a19)); }
  else if constexpr (is_n_args_braces_constructible<T,18>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17),flaten(a18)); }
  else if constexpr (is_n_args_braces_constructible<T,17>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16),flaten(a17)); }
  else if constexpr (is_n_args_braces_constructible<T,16>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15),flaten(a16)); }
  else if constexpr (is_n_args_braces_constructible<T,15>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14),flaten(a15)); }
  else if constexpr (is_n_args_braces_constructible<T,14>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13),flaten(a14)); }
  else if constexpr (is_n_args_braces_constructible<T,13>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12),flaten(a13)); }
  else if constexpr (is_n_args_braces_constructible<T,12>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11),flaten(a12)); }
  else if constexpr (is_n_args_braces_constructible<T,11>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10),flaten(a11)); }
  else if constexpr (is_n_args_braces_constructible<T,10>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9),flaten(a10)); }
  else if constexpr (is_n_args_braces_constructible<T,9>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8,a9] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8),flaten(a9)); }
  else if constexpr (is_n_args_braces_constructible<T,8>()){
        auto& [a1,a2,a3,a4,a5,a6,a7,a8] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7),flaten(a8)); }
  else if constexpr (is_n_args_braces_constructible<T,7>()){
        auto& [a1,a2,a3,a4,a5,a6,a7] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6),flaten(a7)); }
  else if constexpr (is_n_args_braces_constructible<T,6>()){
        auto& [a1,a2,a3,a4,a5,a6] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5),flaten(a6)); }
  else if constexpr (is_n_args_braces_constructible<T,5>()){
        auto& [a1,a2,a3,a4,a5] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4),flaten(a5)); }
  else if constexpr (is_n_args_braces_constructible<T,4>()){
        auto& [a1,a2,a3,a4] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3),flaten(a4)); }
  else if constexpr (is_n_args_braces_constructible<T,3>()){
        auto& [a1,a2,a3] = value; return std::tuple_cat(flaten(a1),flaten(a2),flaten(a3)); }
  else if constexpr (is_n_args_braces_constructible<T,2>()){
        auto& [a1,a2] = value; return std::tuple_cat(flaten(a1),flaten(a2)); }
  else if constexpr (is_n_args_braces_constructible<T,1>()){
        auto& [a1] = value; return std::tuple_cat(flaten(a1)); }
  else { return std::tuple_cat(); }
}
};

// clang-format on

template <class T>
decltype(auto) flaten(T&& v) {
  return __Flattener<T>::_flaten(v);
}

#define __mc_maf_define_aggreation_compare(Operator)                        \
  template <class T, std::enable_if_t<std::is_aggregate_v<T>, bool> = true> \
  bool operator Operator(const T& first, const T& second) {                 \
    using namespace maf::nstl;                                              \
    using namespace std;                                                    \
    return flaten(first) Operator flaten(second);                           \
  }

__mc_maf_define_aggreation_compare(==)      //
    __mc_maf_define_aggreation_compare(!=)  //
    __mc_maf_define_aggreation_compare(<)   //
    __mc_maf_define_aggreation_compare(>)   //
    __mc_maf_define_aggreation_compare(>=)  //
    __mc_maf_define_aggreation_compare(<=)  //

#undef __mc_maf_define_aggreation_compare

#define __mc_maf_define_aggreation_compare(Type, Operator)        \
  bool operator Operator(const Type& first, const Type& second) { \
    using namespace maf::nstl;                                    \
    using namespace std;                                          \
    return flaten(first) Operator flaten(second);                 \
  }

#define MC_MAF_MAKE_COMPARABLE(Type)                           \
  __mc_maf_define_aggreation_compare(Type, ==)                 \
      __mc_maf_define_aggreation_compare(Type, !=)             \
          __mc_maf_define_aggreation_compare(Type, <)          \
              __mc_maf_define_aggreation_compare(Type, >)      \
                  __mc_maf_define_aggreation_compare(Type, >=) \
                      __mc_maf_define_aggreation_compare(Type, <=)

}  // namespace nstl
}  // namespace maf
